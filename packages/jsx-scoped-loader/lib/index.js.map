{"version":3,"sources":["../../../node_modules/.pnpm/tsup@5.11.13_typescript@4.5.5/node_modules/tsup/assets/cjs_shims.js","../../../node_modules/.pnpm/hash-sum@2.0.0/node_modules/hash-sum/hash-sum.js","../src/index.ts","../src/jsx-scoped-visitor.ts","../src/utils.ts"],"sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","'use strict';\n\nfunction pad (hash, len) {\n  while (hash.length < len) {\n    hash = '0' + hash;\n  }\n  return hash;\n}\n\nfunction fold (hash, text) {\n  var i;\n  var chr;\n  var len;\n  if (text.length === 0) {\n    return hash;\n  }\n  for (i = 0, len = text.length; i < len; i++) {\n    chr = text.charCodeAt(i);\n    hash = ((hash << 5) - hash) + chr;\n    hash |= 0;\n  }\n  return hash < 0 ? hash * -2 : hash;\n}\n\nfunction foldObject (hash, o, seen) {\n  return Object.keys(o).sort().reduce(foldKey, hash);\n  function foldKey (hash, key) {\n    return foldValue(hash, o[key], key, seen);\n  }\n}\n\nfunction foldValue (input, value, key, seen) {\n  var hash = fold(fold(fold(input, key), toString(value)), typeof value);\n  if (value === null) {\n    return fold(hash, 'null');\n  }\n  if (value === undefined) {\n    return fold(hash, 'undefined');\n  }\n  if (typeof value === 'object' || typeof value === 'function') {\n    if (seen.indexOf(value) !== -1) {\n      return fold(hash, '[Circular]' + key);\n    }\n    seen.push(value);\n\n    var objHash = foldObject(hash, value, seen)\n\n    if (!('valueOf' in value) || typeof value.valueOf !== 'function') {\n      return objHash;\n    }\n\n    try {\n      return fold(objHash, String(value.valueOf()))\n    } catch (err) {\n      return fold(objHash, '[valueOf exception]' + (err.stack || err.message))\n    }\n  }\n  return fold(hash, value.toString());\n}\n\nfunction toString (o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction sum (o) {\n  return pad(foldValue(0, o, '', []).toString(16), 8);\n}\n\nmodule.exports = sum;\n","import type { Module, Options } from '@swc/core'\nimport { transformSync } from '@swc/core'\nimport JsxScopedVisitor from './jsx-scoped-visitor'\n\nconst defaultOptions: Options = {\n  jsc: {\n    parser: {\n      syntax: 'typescript',\n      tsx: true,\n      decorators: false,\n      dynamicImport: false,\n    },\n    transform: {\n      react: {\n        pragma: 'React.createElement',\n        pragmaFrag: 'React.Fragment',\n        throwIfNamespace: true,\n        development: false,\n        useBuiltins: false,\n      },\n    },\n  },\n}\n\nexport default function jsxLoader(source) {\n  const { code } = transformSync(source, {\n    plugin: (m) => new JsxScopedVisitor(this.resourcePath).visitModule(m as Module),\n    ...defaultOptions,\n  })\n  return code\n}\n","import type {\n  Module,\n  ModuleItem,\n  TsNamespaceExportDeclaration,\n  TsExportAssignment,\n  TsImportEqualsDeclaration,\n  ExportAllDeclaration,\n  ExportDefaultExpression,\n  ExportNamedDeclaration,\n  ExportSpecifier,\n  NamedExportSpecifier,\n  ExportDefaultSpecifier,\n  StringLiteral,\n  ExportDeclaration,\n  ArrayExpression,\n  Expression,\n  SpreadElement,\n  ArrowFunctionExpression,\n  BlockStatement,\n  Statement,\n  SwitchStatement,\n  SwitchCase,\n  IfStatement,\n  BreakStatement,\n  WhileStatement,\n  TryStatement,\n  CatchClause,\n  ThrowStatement,\n  ReturnStatement,\n  LabeledStatement,\n  ForStatement,\n  ForOfStatement,\n  ForInStatement,\n  EmptyStatement,\n  DoWhileStatement,\n  DebuggerStatement,\n  WithStatement,\n  VariableDeclaration,\n  VariableDeclarator,\n  TsTypeAliasDeclaration,\n  TsModuleDeclaration,\n  TsInterfaceDeclaration,\n  TsEnumDeclaration,\n  FunctionDeclaration,\n  ClassDeclaration,\n  ContinueStatement,\n  TsTypeParameterDeclaration,\n  TsTypeAnnotation,\n  TsType,\n  Pattern,\n  ImportDeclaration,\n  ImportSpecifier,\n  NamedImportSpecifier,\n  ImportNamespaceSpecifier,\n  ImportDefaultSpecifier,\n  TsTypeParameterInstantiation,\n  TsExpressionWithTypeArguments,\n  TsEntityName,\n  Decorator,\n  ClassMember,\n  TsIndexSignature,\n  PrivateProperty,\n  PrivateMethod,\n  Constructor,\n  ClassProperty,\n  ClassMethod,\n  Accessibility,\n  PropertyName,\n  NumericLiteral,\n  TsParameterProperty,\n  PrivateName,\n  Fn,\n  TsQualifiedName,\n  TsParameterPropertyParameter,\n  TsModuleReference,\n  TsExternalModuleReference,\n  AssignmentPattern,\n  RestElement,\n  ObjectPattern,\n  ArrayPattern,\n  Class,\n  ClassExpression,\n  TsFnParameter,\n  TsTypeParameter,\n  ObjectPatternProperty,\n  TsNamespaceBody,\n  TsModuleName,\n  TsNamespaceDeclaration,\n  TsModuleBlock,\n  TsInterfaceBody,\n  TsTypeElement,\n  TsEnumMember,\n  TsEnumMemberId,\n  YieldExpression,\n  UpdateExpression,\n  UnaryExpression,\n  TsTypeAssertion,\n  TsNonNullExpression,\n  TsAsExpression,\n  ThisExpression,\n  TemplateLiteral,\n  TaggedTemplateExpression,\n  SequenceExpression,\n  RegExpLiteral,\n  ParenthesisExpression,\n  ObjectExpression,\n  NullLiteral,\n  NewExpression,\n  MetaProperty,\n  MemberExpression,\n  JSXText,\n  JSXNamespacedName,\n  JSXMemberExpression,\n  JSXFragment,\n  JSXEmptyExpression,\n  JSXElement,\n  ConditionalExpression,\n  CallExpression,\n  BooleanLiteral,\n  BinaryExpression,\n  AwaitExpression,\n  KeyValuePatternProperty,\n  AssignmentPatternProperty,\n  Property,\n  AssignmentExpression,\n  Super,\n  JSXObject,\n  JSXClosingFragment,\n  JSXElementChild,\n  JSXOpeningFragment,\n  JSXClosingElement,\n  JSXOpeningElement,\n  JSXAttributeOrSpread,\n  JSXExpressionContainer,\n  JSXSpreadChild,\n  JSXElementName,\n  JSXAttribute,\n  JSXAttributeName,\n  SetterProperty,\n  MethodProperty,\n  KeyValueProperty,\n  GetterProperty,\n  AssignmentProperty,\n  ComputedPropName,\n  Argument,\n  ExportDefaultDeclaration,\n  FunctionExpression,\n  ExportNamespaceSpecifier,\n  Param,\n  BigIntLiteral,\n  JSXAttrValue,\n  ExpressionStatement,\n  ExprOrSpread,\n  Identifier,\n  DefaultDecl,\n  ModuleDeclaration,\n  Declaration,\n} from '@swc/core'\nimport { Visitor } from '@swc/core/Visitor'\nimport path from 'path'\nimport fs from 'fs'\nimport hash from 'hash-sum'\nimport { getFileFullPath } from './utils'\n\nexport default class JsxScopedVisitor extends Visitor {\n  resourcePath: string\n  hash: string\n  constructor(resourcePath: string) {\n    super()\n    this.resourcePath = resourcePath\n  }\n  visitModule(m: Module): Module {\n    m.body = this.visitModuleItems(m.body)\n    return m\n  }\n\n  visitModuleItems(items: ModuleItem[]): ModuleItem[] {\n    return items.map(this.visitModuleItem.bind(this))\n  }\n\n  visitModuleItem(n: ModuleItem): ModuleItem {\n    switch (n.type) {\n      case 'ExportDeclaration':\n      case 'ExportDefaultDeclaration':\n      case 'ExportNamedDeclaration':\n      case 'ExportDefaultExpression':\n      case 'ImportDeclaration':\n      case 'ExportAllDeclaration':\n      case 'TsImportEqualsDeclaration':\n      case 'TsExportAssignment':\n      case 'TsNamespaceExportDeclaration':\n        return this.visitModuleDeclaration(n)\n      default:\n        return this.visitStatement(n)\n    }\n  }\n\n  visitModuleDeclaration(n: ModuleDeclaration): ModuleDeclaration {\n    switch (n.type) {\n      case 'ExportDeclaration':\n        return this.visitExportDeclaration(n)\n      case 'ExportDefaultDeclaration':\n        return this.visitExportDefaultDeclaration(n)\n      case 'ExportNamedDeclaration':\n        return this.visitExportNamedDeclration(n)\n      case 'ExportDefaultExpression':\n        return this.visitExportDefaultExpression(n)\n      case 'ImportDeclaration':\n        this.setHash(n.source)\n        return this.visitImportDeclaration(n)\n      case 'ExportAllDeclaration':\n        return this.visitExportAllDeclration(n)\n      case 'TsImportEqualsDeclaration':\n        return this.visitTsImportEqualsDeclaration(n)\n      case 'TsExportAssignment':\n        return this.visitTsExportAssignment(n)\n      case 'TsNamespaceExportDeclaration':\n        return this.visitTsNamespaceExportDeclaration(n)\n    }\n  }\n  /**\n   * 设置hash\n   */\n  setHash(n: StringLiteral) {\n    const cssFilename = n.value?.split('/')?.pop()\n    const regex = /\\.(css|less|scss|sass)$/\n    if (!regex.test(cssFilename)) {\n      return\n    }\n    const filepaths = this.resourcePath.split('/')\n    filepaths.pop()\n    const filepath = filepaths.join('/')\n    const cssFullPath = path.resolve(filepath, cssFilename)\n    const cssExist = fs.existsSync(cssFullPath)\n    if (cssExist) {\n      this.hash = hash(cssFullPath)\n    } else {\n      const rootDir = `${process.cwd()}/src`\n      const fullPath = getFileFullPath(rootDir, cssFilename)\n      if (fullPath) {\n        this.hash = hash(fullPath)\n      } else {\n        console.log(`未找到${this.resourcePath}文件中导入的${cssFilename}文件，无法生成css scope`)\n      }\n    }\n  }\n\n  visitTsNamespaceExportDeclaration(n: TsNamespaceExportDeclaration): ModuleDeclaration {\n    n.id = this.visitBindingIdentifier(n.id)\n    return n\n  }\n\n  visitTsExportAssignment(n: TsExportAssignment): TsExportAssignment {\n    n.expression = this.visitExpression(n.expression)\n\n    return n\n  }\n\n  visitTsImportEqualsDeclaration(n: TsImportEqualsDeclaration): ModuleDeclaration {\n    n.id = this.visitBindingIdentifier(n.id)\n    n.moduleRef = this.visitTsModuleReference(n.moduleRef)\n    return n\n  }\n\n  visitTsModuleReference(n: TsModuleReference): TsModuleReference {\n    switch (n.type) {\n      case 'Identifier':\n        return this.visitIdentifierReference(n)\n      case 'TsExternalModuleReference':\n        return this.visitTsExternalModuleReference(n)\n      case 'TsQualifiedName':\n        return this.visitTsQualifiedName(n)\n    }\n  }\n\n  visitTsExternalModuleReference(n: TsExternalModuleReference): TsExternalModuleReference {\n    n.expression = this.visitExpression(n.expression)\n    return n\n  }\n\n  visitExportAllDeclration(n: ExportAllDeclaration): ModuleDeclaration {\n    n.source = this.visitStringLiteral(n.source)\n    return n\n  }\n\n  visitExportDefaultExpression(n: ExportDefaultExpression): ModuleDeclaration {\n    n.expression = this.visitExpression(n.expression)\n    return n\n  }\n\n  visitExportNamedDeclration(n: ExportNamedDeclaration): ModuleDeclaration {\n    n.specifiers = this.visitExportSpecifiers(n.specifiers)\n    n.source = this.visitOptionalStringLiteral(n.source)\n    return n\n  }\n\n  visitExportSpecifiers(nodes: ExportSpecifier[]): ExportSpecifier[] {\n    return nodes.map(this.visitExportSpecifier.bind(this))\n  }\n\n  visitExportSpecifier(n: ExportSpecifier): ExportSpecifier {\n    switch (n.type) {\n      case 'ExportDefaultSpecifier':\n        return this.visitExportDefaultSpecifier(n)\n      case 'ExportNamespaceSpecifier':\n        return this.visitExportNamespaceSpecifier(n)\n      case 'ExportSpecifier':\n        return this.visitNamedExportSpecifier(n)\n    }\n  }\n  visitNamedExportSpecifier(n: NamedExportSpecifier): ExportSpecifier {\n    if (n.exported) {\n      n.exported = this.visitBindingIdentifier(n.exported)\n    }\n    n.orig = this.visitIdentifierReference(n.orig)\n    return n\n  }\n\n  visitExportNamespaceSpecifier(n: ExportNamespaceSpecifier): ExportSpecifier {\n    n.name = this.visitBindingIdentifier(n.name)\n    return n\n  }\n\n  visitExportDefaultSpecifier(n: ExportDefaultSpecifier): ExportSpecifier {\n    n.exported = this.visitBindingIdentifier(n.exported)\n    return n\n  }\n\n  visitOptionalStringLiteral(n: StringLiteral | undefined): StringLiteral | undefined {\n    if (n) {\n      return this.visitStringLiteral(n)\n    }\n  }\n\n  visitExportDefaultDeclaration(n: ExportDefaultDeclaration): ModuleDeclaration {\n    n.decl = this.visitDefaultDeclaration(n.decl)\n    return n\n  }\n\n  visitDefaultDeclaration(n: DefaultDecl): DefaultDecl {\n    switch (n.type) {\n      case 'ClassExpression':\n        return this.visitClassExpression(n)\n      case 'FunctionExpression':\n        return this.visitFunctionExpression(n)\n      case 'TsInterfaceDeclaration':\n        return this.visitTsInterfaceDeclaration(n)\n    }\n  }\n\n  visitFunctionExpression(n: FunctionExpression): FunctionExpression {\n    n = this.visitFunction(n)\n    if (n.identifier) {\n      n.identifier = this.visitBindingIdentifier(n.identifier)\n    }\n    return n\n  }\n\n  visitClassExpression(n: ClassExpression): ClassExpression {\n    n = this.visitClass(n)\n    if (n.identifier) {\n      n.identifier = this.visitBindingIdentifier(n.identifier)\n    }\n    return n\n  }\n\n  visitExportDeclaration(n: ExportDeclaration): ModuleDeclaration {\n    n.declaration = this.visitDeclaration(n.declaration)\n    return n\n  }\n\n  visitArrayExpression(e: ArrayExpression): Expression {\n    if (e.elements) {\n      e.elements = e.elements.map(this.visitArrayElement.bind(this))\n    }\n    return e\n  }\n\n  visitArrayElement(e: ExprOrSpread | undefined): ExprOrSpread | undefined {\n    return this.visitExprOrSpread(e)\n  }\n\n  visitExprOrSpread(e: ExprOrSpread): ExprOrSpread {\n    e.expression = this.visitOptionalExpression(e.expression)\n    return e\n  }\n\n  visitSpreadElement(e: SpreadElement): SpreadElement {\n    e.arguments = this.visitExpression(e.arguments)\n    return e\n  }\n\n  visitOptionalExpression(e: Expression | undefined): Expression | undefined {\n    if (e) {\n      return this.visitExpression(e)\n    }\n  }\n\n  visitArrowFunctionExpression(e: ArrowFunctionExpression): Expression {\n    e.body = this.visitArrowBody(e.body)\n    e.params = this.visitPatterns(e.params)\n    e.returnType = this.visitTsTypeAnnotation(e.returnType)\n    e.typeParameters = this.visitTsTypeParameterDeclaration(e.typeParameters)\n\n    return e\n  }\n\n  visitArrowBody(body: BlockStatement | Expression): BlockStatement | Expression {\n    switch (body.type) {\n      case 'BlockStatement':\n        return this.visitBlockStatement(body)\n      default:\n        return this.visitExpression(body)\n    }\n  }\n\n  visitBlockStatement(block: BlockStatement): BlockStatement {\n    block.stmts = this.visitStatements(block.stmts)\n\n    return block\n  }\n\n  visitStatements(stmts: Statement[]): Statement[] {\n    return stmts.map(this.visitStatement.bind(this))\n  }\n\n  visitStatement(stmt: Statement): Statement {\n    switch (stmt.type) {\n      case 'ClassDeclaration':\n      case 'FunctionDeclaration':\n      case 'TsEnumDeclaration':\n      case 'TsInterfaceDeclaration':\n      case 'TsModuleDeclaration':\n      case 'TsTypeAliasDeclaration':\n      case 'VariableDeclaration':\n        return this.visitDeclaration(stmt)\n      case 'BreakStatement':\n        return this.visitBreakStatement(stmt)\n      case 'BlockStatement':\n        return this.visitBlockStatement(stmt)\n      case 'ContinueStatement':\n        return this.visitContinueStatement(stmt)\n      case 'DebuggerStatement':\n        return this.visitDebuggerStatement(stmt)\n      case 'DoWhileStatement':\n        return this.visitDoWhileStatement(stmt)\n      case 'EmptyStatement':\n        return this.visitEmptyStatement(stmt)\n      case 'ForInStatement':\n        return this.visitForInStatement(stmt)\n      case 'ForOfStatement':\n        return this.visitForOfStatement(stmt)\n      case 'ForStatement':\n        return this.visitForStatement(stmt)\n      case 'IfStatement':\n        return this.visitIfStatement(stmt)\n      case 'LabeledStatement':\n        return this.visitLabeledStatement(stmt)\n      case 'ReturnStatement':\n        return this.visitReturnStatement(stmt)\n      case 'SwitchStatement':\n        return this.visitSwitchStatement(stmt)\n      case 'ThrowStatement':\n        return this.visitThrowStatement(stmt)\n      case 'TryStatement':\n        return this.visitTryStatement(stmt)\n      case 'WhileStatement':\n        return this.visitWhileStatement(stmt)\n      case 'WithStatement':\n        return this.visitWithStatement(stmt)\n\n      default:\n        return this.visitExpressionStatement(stmt)\n    }\n  }\n\n  visitSwitchStatement(stmt: SwitchStatement): Statement {\n    stmt.discriminant = this.visitExpression(stmt.discriminant)\n    stmt.cases = this.visitSwitchCases(stmt.cases)\n    return stmt\n  }\n\n  visitSwitchCases(cases: SwitchCase[]): SwitchCase[] {\n    return cases.map(this.visitSwitchCase.bind(this))\n  }\n\n  visitSwitchCase(c: SwitchCase): SwitchCase {\n    c.test = this.visitOptionalExpression(c.test)\n    c.consequent = this.visitStatements(c.consequent)\n\n    return c\n  }\n\n  visitIfStatement(stmt: IfStatement): Statement {\n    stmt.test = this.visitExpression(stmt.test)\n    stmt.consequent = this.visitStatement(stmt.consequent)\n    stmt.alternate = this.visitOptionalStatement(stmt.alternate)\n\n    return stmt\n  }\n\n  visitOptionalStatement(stmt: Statement | undefined): Statement | undefined {\n    if (stmt) {\n      return this.visitStatement(stmt)\n    }\n  }\n\n  visitBreakStatement(stmt: BreakStatement): Statement {\n    if (stmt.label) {\n      stmt.label = this.visitLabelIdentifier(stmt.label)\n    }\n\n    return stmt\n  }\n\n  visitWhileStatement(stmt: WhileStatement): Statement {\n    stmt.test = this.visitExpression(stmt.test)\n    stmt.body = this.visitStatement(stmt.body)\n    return stmt\n  }\n\n  visitTryStatement(stmt: TryStatement): Statement {\n    stmt.block = this.visitBlockStatement(stmt.block)\n    stmt.handler = this.visitCatchClause(stmt.handler)\n    if (stmt.finalizer) {\n      stmt.finalizer = this.visitBlockStatement(stmt.finalizer)\n    }\n    return stmt\n  }\n\n  visitCatchClause(handler: CatchClause | undefined): CatchClause | undefined {\n    if (handler) {\n      if (handler.param) {\n        handler.param = this.visitPattern(handler.param)\n      }\n\n      handler.body = this.visitBlockStatement(handler.body)\n    }\n\n    return handler\n  }\n\n  visitThrowStatement(stmt: ThrowStatement): Statement {\n    stmt.argument = this.visitExpression(stmt.argument)\n    return stmt\n  }\n\n  visitReturnStatement(stmt: ReturnStatement): Statement {\n    if (stmt.argument) {\n      stmt.argument = this.visitExpression(stmt.argument)\n    }\n    return stmt\n  }\n\n  visitLabeledStatement(stmt: LabeledStatement): Statement {\n    stmt.label = this.visitLabelIdentifier(stmt.label)\n    stmt.body = this.visitStatement(stmt.body)\n\n    return stmt\n  }\n\n  visitForStatement(stmt: ForStatement): Statement {\n    if (stmt.init) {\n      if (stmt.init.type === 'VariableDeclaration') {\n        stmt.init = this.visitVariableDeclaration(stmt.init)\n      } else {\n        stmt.init = this.visitOptionalExpression(stmt.init)\n      }\n    }\n\n    stmt.test = this.visitOptionalExpression(stmt.test)\n    stmt.update = this.visitOptionalExpression(stmt.update)\n    stmt.body = this.visitStatement(stmt.body)\n\n    return stmt\n  }\n\n  visitForOfStatement(stmt: ForOfStatement): Statement {\n    if (stmt.left.type === 'VariableDeclaration') {\n      stmt.left = this.visitVariableDeclaration(stmt.left)\n    } else {\n      stmt.left = this.visitPattern(stmt.left)\n    }\n    stmt.right = this.visitExpression(stmt.right)\n    stmt.body = this.visitStatement(stmt.body)\n    return stmt\n  }\n\n  visitForInStatement(stmt: ForInStatement): Statement {\n    if (stmt.left.type === 'VariableDeclaration') {\n      stmt.left = this.visitVariableDeclaration(stmt.left)\n    } else {\n      stmt.left = this.visitPattern(stmt.left)\n    }\n    stmt.right = this.visitExpression(stmt.right)\n    stmt.body = this.visitStatement(stmt.body)\n    return stmt\n  }\n\n  visitEmptyStatement(stmt: EmptyStatement): Statement {\n    return stmt\n  }\n\n  visitDoWhileStatement(stmt: DoWhileStatement): Statement {\n    stmt.body = this.visitStatement(stmt.body)\n    stmt.test = this.visitExpression(stmt.test)\n    return stmt\n  }\n\n  visitDebuggerStatement(stmt: DebuggerStatement): Statement {\n    return stmt\n  }\n\n  visitWithStatement(stmt: WithStatement): Statement {\n    stmt.object = this.visitExpression(stmt.object)\n    stmt.body = this.visitStatement(stmt.body)\n    return stmt\n  }\n\n  visitDeclaration(decl: Declaration): Declaration {\n    switch (decl.type) {\n      case 'ClassDeclaration':\n        return this.visitClassDeclartion(decl)\n      case 'FunctionDeclaration':\n        return this.visitFunctionDeclaration(decl)\n      case 'TsEnumDeclaration':\n        return this.visitTsEnumDeclaration(decl)\n      case 'TsInterfaceDeclaration':\n        return this.visitTsInterfaceDeclaration(decl)\n      case 'TsModuleDeclaration':\n        return this.visitTsModuleDeclaration(decl)\n      case 'TsTypeAliasDeclaration':\n        return this.visitTsTypeAliasDeclaration(decl)\n      case 'VariableDeclaration':\n        return this.visitVariableDeclaration(decl)\n    }\n  }\n\n  visitVariableDeclaration(n: VariableDeclaration): VariableDeclaration {\n    n.declarations = this.visitVariableDeclarators(n.declarations)\n    return n\n  }\n\n  visitVariableDeclarators(nodes: VariableDeclarator[]): VariableDeclarator[] {\n    return nodes.map(this.visitVariableDeclarator.bind(this))\n  }\n\n  visitVariableDeclarator(n: VariableDeclarator): VariableDeclarator {\n    n.id = this.visitPattern(n.id)\n    n.init = this.visitOptionalExpression(n.init)\n    return n\n  }\n\n  visitTsTypeAliasDeclaration(n: TsTypeAliasDeclaration): Declaration {\n    n.id = this.visitBindingIdentifier(n.id)\n    n.typeAnnotation = this.visitTsType(n.typeAnnotation)\n    n.typeParams = this.visitTsTypeParameterDeclaration(n.typeParams)\n    return n\n  }\n\n  visitTsModuleDeclaration(n: TsModuleDeclaration): Declaration {\n    n.id = this.visitTsModuleName(n.id)\n    if (n.body) {\n      n.body = this.visitTsNamespaceBody(n.body)\n    }\n    return n\n  }\n\n  visitTsModuleName(n: TsModuleName): TsModuleName {\n    switch (n.type) {\n      case 'Identifier':\n        return this.visitBindingIdentifier(n)\n      case 'StringLiteral':\n        return this.visitStringLiteral(n)\n    }\n  }\n\n  visitTsNamespaceBody(n: TsNamespaceBody): TsNamespaceBody | undefined {\n    if (n) {\n      switch (n.type) {\n        case 'TsModuleBlock':\n          return this.visitTsModuleBlock(n)\n        case 'TsNamespaceDeclaration':\n          return this.visitTsNamespaceDeclaration(n)\n      }\n    }\n  }\n\n  visitTsNamespaceDeclaration(n: TsNamespaceDeclaration): TsModuleBlock | TsNamespaceDeclaration {\n    const body = this.visitTsNamespaceBody(n.body)\n    if (body) {\n      n.body = body\n    }\n    n.id = this.visitBindingIdentifier(n.id)\n    return n\n  }\n\n  visitTsModuleBlock(n: TsModuleBlock): TsModuleBlock | TsNamespaceDeclaration {\n    n.body = this.visitModuleItems(n.body)\n    return n\n  }\n\n  visitTsInterfaceDeclaration(n: TsInterfaceDeclaration): TsInterfaceDeclaration {\n    n.id = this.visitBindingIdentifier(n.id)\n    n.typeParams = this.visitTsTypeParameterDeclaration(n.typeParams)\n    n.extends = this.visitTsExpressionsWithTypeArguments(n.extends)\n    n.body = this.visitTsInterfaceBody(n.body)\n    return n\n  }\n\n  visitTsInterfaceBody(n: TsInterfaceBody): TsInterfaceBody {\n    n.body = this.visitTsTypeElements(n.body)\n    return n\n  }\n\n  visitTsTypeElements(nodes: TsTypeElement[]): TsTypeElement[] {\n    return nodes.map(this.visitTsTypeElement.bind(this))\n  }\n\n  visitTsTypeElement(n: TsTypeElement): TsTypeElement {\n    n.params = this.visitTsFnParameters(n.params)\n    n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation)\n    return n\n  }\n\n  visitTsEnumDeclaration(n: TsEnumDeclaration): Declaration {\n    n.id = this.visitIdentifier(n.id)\n    n.members = this.visitTsEnumMembers(n.members)\n    return n\n  }\n\n  visitTsEnumMembers(nodes: TsEnumMember[]): TsEnumMember[] {\n    return nodes.map(this.visitTsEnumMember.bind(this))\n  }\n\n  visitTsEnumMember(n: TsEnumMember): TsEnumMember {\n    n.id = this.visitTsEnumMemberId(n.id)\n    n.init = this.visitOptionalExpression(n.init)\n    return n\n  }\n\n  visitTsEnumMemberId(n: TsEnumMemberId): TsEnumMemberId {\n    switch (n.type) {\n      case 'Identifier':\n        return this.visitBindingIdentifier(n)\n      case 'StringLiteral':\n        return this.visitStringLiteral(n)\n    }\n  }\n\n  visitFunctionDeclaration(decl: FunctionDeclaration): Declaration {\n    decl.identifier = this.visitIdentifier(decl.identifier)\n    decl = this.visitFunction(decl)\n\n    return decl\n  }\n\n  visitClassDeclartion(decl: ClassDeclaration): Declaration {\n    decl = this.visitClass(decl)\n    decl.identifier = this.visitIdentifier(decl.identifier)\n    return decl\n  }\n\n  visitClassBody(members: ClassMember[] | undefined): ClassMember[] | undefined {\n    if (members) {\n      return members.map(this.visitClassMember.bind(this))\n    }\n  }\n\n  visitClassMember(member: ClassMember): ClassMember {\n    switch (member.type) {\n      case 'ClassMethod':\n        return this.visitClassMethod(member)\n      case 'ClassProperty':\n        return this.visitClassProperty(member)\n      case 'Constructor':\n        return this.visitConstructor(member)\n      case 'PrivateMethod':\n        return this.visitPrivateMethod(member)\n      case 'PrivateProperty':\n        return this.visitPrivateProperty(member)\n      case 'TsIndexSignature':\n        return this.visitTsIndexSignature(member)\n    }\n  }\n\n  visitTsIndexSignature(n: TsIndexSignature): ClassMember {\n    n.params = this.visitTsFnParameters(n.params)\n    n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation)\n    return n\n  }\n\n  visitTsFnParameters(params: TsFnParameter[]): TsFnParameter[] {\n    return params.map(this.visitTsFnParameter.bind(this))\n  }\n\n  visitTsFnParameter(n: TsFnParameter): TsFnParameter {\n    n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation)\n    return n\n  }\n\n  visitPrivateProperty(n: PrivateProperty): ClassMember {\n    n.decorators = this.visitDecorators(n.decorators)\n    n.key = this.visitPrivateName(n.key)\n    n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation)\n    n.value = this.visitOptionalExpression(n.value)\n    return n\n  }\n\n  visitPrivateMethod(n: PrivateMethod): ClassMember {\n    n.accessibility = this.visitAccessibility(n.accessibility)\n    n.function = this.visitFunction(n.function)\n    n.key = this.visitPrivateName(n.key)\n    return n\n  }\n\n  visitPrivateName(n: PrivateName): PrivateName {\n    return n\n  }\n\n  visitConstructor(n: Constructor): ClassMember {\n    n.accessibility = this.visitAccessibility(n.accessibility)\n    n.key = this.visitPropertyName(n.key)\n    n.params = this.visitConstructorParameters(n.params)\n    if (n.body) {\n      n.body = this.visitBlockStatement(n.body)\n    }\n    return n\n  }\n\n  visitConstructorParameters(\n    nodes: (Param | TsParameterProperty)[]\n  ): (Param | TsParameterProperty)[] {\n    return nodes.map(this.visitConstructorParameter.bind(this))\n  }\n\n  visitConstructorParameter(n: Param | TsParameterProperty): Param | TsParameterProperty {\n    switch (n.type) {\n      case 'TsParameterProperty':\n        return this.visitTsParameterProperty(n)\n      default:\n        return this.visitParameter(n)\n    }\n  }\n\n  visitParameter(n: Param): Param {\n    n.pat = this.visitPattern(n.pat)\n    return n\n  }\n\n  visitTsParameterProperty(n: TsParameterProperty): TsParameterProperty | Param {\n    n.accessibility = this.visitAccessibility(n.accessibility)\n    n.decorators = this.visitDecorators(n.decorators)\n    n.param = this.visitTsParameterPropertyParameter(n.param)\n    return n\n  }\n\n  visitTsParameterPropertyParameter(n: TsParameterPropertyParameter): TsParameterPropertyParameter {\n    n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation)\n    return n\n  }\n\n  visitPropertyName(key: PropertyName): PropertyName {\n    switch (key.type) {\n      case 'Identifier':\n        return this.visitBindingIdentifier(key)\n      case 'StringLiteral':\n        return this.visitStringLiteral(key)\n      case 'NumericLiteral':\n        return this.visitNumericLiteral(key)\n      case 'BigIntLiteral':\n        return this.visitBigIntLiteral(key)\n      default:\n        return this.visitComputedPropertyKey(key)\n    }\n  }\n\n  visitAccessibility(n: Accessibility | undefined): Accessibility | undefined {\n    return n\n  }\n\n  visitClassProperty(n: ClassProperty): ClassMember {\n    n.accessibility = this.visitAccessibility(n.accessibility)\n    n.decorators = this.visitDecorators(n.decorators)\n    n.key = this.visitPropertyName(n.key)\n    n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation)\n    n.value = this.visitOptionalExpression(n.value)\n    return n\n  }\n\n  visitClassMethod(n: ClassMethod): ClassMember {\n    n.accessibility = this.visitAccessibility(n.accessibility)\n    n.function = this.visitFunction(n.function)\n    n.key = this.visitPropertyName(n.key)\n    return n\n  }\n\n  visitPropertName(n: PropertyName): PropertyName {\n    switch (n.type) {\n      case 'Identifier':\n        return this.visitIdentifier(n)\n      case 'NumericLiteral':\n        return this.visitNumericLiteral(n)\n      case 'StringLiteral':\n        return this.visitStringLiteral(n)\n      case 'Computed':\n        return this.visitComputedPropertyKey(n)\n    }\n  }\n  visitComputedPropertyKey(n: ComputedPropName): ComputedPropName {\n    n.expression = this.visitExpression(n.expression)\n    return n\n  }\n\n  visitClass<T extends Class>(n: T): T {\n    n.decorators = this.visitDecorators(n.decorators)\n\n    n.superClass = this.visitOptionalExpression(n.superClass)\n\n    n.superTypeParams = this.visitTsTypeParameterInstantiation(n.superTypeParams)\n    if (n.implements) {\n      n.implements = this.visitTsExpressionsWithTypeArguments(n.implements)\n    }\n\n    n.body = this.visitClassBody(n.body)\n    return n\n  }\n\n  visitFunction<T extends Fn>(n: T): T {\n    n.decorators = this.visitDecorators(n.decorators)\n    n.params = this.visitParameters(n.params)\n    if (n.body) {\n      n.body = this.visitBlockStatement(n.body)\n    }\n    n.returnType = this.visitTsTypeAnnotation(n.returnType)\n    n.typeParameters = this.visitTsTypeParameterDeclaration(n.typeParameters)\n    return n\n  }\n\n  visitTsExpressionsWithTypeArguments(\n    nodes: TsExpressionWithTypeArguments[]\n  ): TsExpressionWithTypeArguments[] {\n    return nodes.map(this.visitTsExpressionWithTypeArguments.bind(this))\n  }\n\n  visitTsExpressionWithTypeArguments(\n    n: TsExpressionWithTypeArguments\n  ): TsExpressionWithTypeArguments {\n    n.expression = this.visitTsEntityName(n.expression)\n    n.typeArguments = this.visitTsTypeParameterInstantiation(n.typeArguments)\n    return n\n  }\n\n  visitTsTypeParameterInstantiation(\n    n: TsTypeParameterInstantiation | undefined\n  ): TsTypeParameterInstantiation | undefined {\n    if (n) {\n      n.params = this.visitTsTypes(n.params)\n    }\n    return n\n  }\n\n  visitTsTypes(nodes: TsType[]): TsType[] {\n    return nodes.map(this.visitTsType.bind(this))\n  }\n\n  visitTsEntityName(n: TsEntityName): TsEntityName {\n    switch (n.type) {\n      case 'Identifier':\n        return this.visitBindingIdentifier(n)\n      case 'TsQualifiedName':\n        return this.visitTsQualifiedName(n)\n    }\n  }\n\n  visitTsQualifiedName(n: TsQualifiedName): TsQualifiedName {\n    n.left = this.visitTsEntityName(n.left)\n    n.right = this.visitIdentifier(n.right)\n    return n\n  }\n\n  visitDecorators(nodes: Decorator[] | undefined): Decorator[] | undefined {\n    if (nodes) {\n      return nodes.map(this.visitDecorator.bind(this))\n    }\n  }\n\n  visitDecorator(n: Decorator): Decorator {\n    n.expression = this.visitExpression(n.expression)\n\n    return n\n  }\n\n  visitExpressionStatement(expr: ExpressionStatement): Statement {\n    expr.expression = this.visitExpression(expr.expression)\n    return expr\n  }\n\n  visitContinueStatement(stmt: ContinueStatement): Statement {\n    if (stmt.label) {\n      stmt.label = this.visitLabelIdentifier(stmt.label)\n    }\n    return stmt\n  }\n\n  visitExpression(n: Expression): Expression {\n    switch (n.type) {\n      case 'ArrayExpression':\n        return this.visitArrayExpression(n)\n      case 'ArrowFunctionExpression':\n        return this.visitArrowFunctionExpression(n)\n      case 'AssignmentExpression':\n        return this.visitAssignmentExpression(n)\n      case 'AwaitExpression':\n        return this.visitAwaitExpression(n)\n      case 'BinaryExpression':\n        return this.visitBinaryExpression(n)\n      case 'BooleanLiteral':\n        return this.visitBooleanLiteral(n)\n      case 'CallExpression':\n        return this.visitCallExpression(n)\n      case 'ClassExpression':\n        return this.visitClassExpression(n)\n      case 'ConditionalExpression':\n        return this.visitConditionalExpression(n)\n      case 'FunctionExpression':\n        return this.visitFunctionExpression(n)\n      case 'Identifier':\n        return this.visitIdentifierReference(n)\n      case 'JSXElement':\n        return this.visitJSXElement(n)\n      case 'JSXEmptyExpression':\n        return this.visitJSXEmptyExpression(n)\n      case 'JSXFragment':\n        return this.visitJSXFragment(n)\n      case 'JSXMemberExpression':\n        return this.visitJSXMemberExpression(n)\n      case 'JSXNamespacedName':\n        return this.visitJSXNamespacedName(n)\n      case 'JSXText':\n        return this.visitJSXText(n)\n      case 'MemberExpression':\n        return this.visitMemberExpression(n)\n      case 'MetaProperty':\n        return this.visitMetaProperty(n)\n      case 'NewExpression':\n        return this.visitNewExpression(n)\n      case 'NullLiteral':\n        return this.visitNullLiteral(n)\n      case 'NumericLiteral':\n        return this.visitNumericLiteral(n)\n      case 'ObjectExpression':\n        return this.visitObjectExpression(n)\n      case 'ParenthesisExpression':\n        return this.visitParenthesisExpression(n)\n      case 'PrivateName':\n        return this.visitPrivateName(n)\n      case 'RegExpLiteral':\n        return this.visitRegExpLiteral(n)\n      case 'SequenceExpression':\n        return this.visitSequenceExpression(n)\n      case 'StringLiteral':\n        return this.visitStringLiteral(n)\n      case 'TaggedTemplateExpression':\n        return this.visitTaggedTemplateExpression(n)\n      case 'TemplateLiteral':\n        return this.visitTemplateLiteral(n)\n      case 'ThisExpression':\n        return this.visitThisExpression(n)\n      case 'TsAsExpression':\n        return this.visitTsAsExpression(n)\n      case 'TsNonNullExpression':\n        return this.visitTsNonNullExpression(n)\n      case 'TsTypeAssertion':\n        return this.visitTsTypeAssertion(n)\n      case 'UnaryExpression':\n        return this.visitUnaryExpression(n)\n      case 'UpdateExpression':\n        return this.visitUpdateExpression(n)\n      case 'YieldExpression':\n        return this.visitYieldExpression(n)\n      case 'Invalid':\n        return n\n    }\n  }\n\n  visitAssignmentExpression(n: AssignmentExpression): Expression {\n    n.left = this.visitPatternOrExpressison(n.left)\n    n.right = this.visitExpression(n.right)\n    return n\n  }\n\n  visitPatternOrExpressison(n: Pattern | Expression): Pattern | Expression {\n    switch (n.type) {\n      case 'ObjectPattern':\n      case 'ArrayPattern':\n      case 'Identifier':\n      case 'AssignmentPattern':\n      case 'RestElement':\n        return this.visitPattern(n)\n      default:\n        return this.visitExpression(n)\n    }\n  }\n\n  visitYieldExpression(n: YieldExpression): Expression {\n    n.argument = this.visitOptionalExpression(n.argument)\n    return n\n  }\n\n  visitUpdateExpression(n: UpdateExpression): Expression {\n    n.argument = this.visitExpression(n.argument)\n    return n\n  }\n\n  visitUnaryExpression(n: UnaryExpression): Expression {\n    n.argument = this.visitExpression(n.argument)\n    return n\n  }\n\n  visitTsTypeAssertion(n: TsTypeAssertion): Expression {\n    n.expression = this.visitExpression(n.expression)\n    n.typeAnnotation = this.visitTsType(n.typeAnnotation)\n    return n\n  }\n\n  visitTsNonNullExpression(n: TsNonNullExpression): Expression {\n    n.expression = this.visitExpression(n.expression)\n    return n\n  }\n\n  visitTsAsExpression(n: TsAsExpression): Expression {\n    n.expression = this.visitExpression(n.expression)\n    n.typeAnnotation = this.visitTsType(n.typeAnnotation)\n    return n\n  }\n\n  visitThisExpression(n: ThisExpression): Expression {\n    return n\n  }\n\n  visitTemplateLiteral(n: TemplateLiteral): Expression {\n    n.expressions = n.expressions.map(this.visitExpression.bind(this))\n    return n\n  }\n\n  visitTaggedTemplateExpression(n: TaggedTemplateExpression): Expression {\n    n.tag = this.visitExpression(n.tag)\n    n.typeParameters = this.visitTsTypeParameterInstantiation(n.typeParameters)\n    return n\n  }\n\n  visitSequenceExpression(n: SequenceExpression): Expression {\n    n.expressions = n.expressions.map(this.visitExpression.bind(this))\n    return n\n  }\n\n  visitRegExpLiteral(n: RegExpLiteral): Expression {\n    // n.pattern = this.visitStringLiteral(n.pattern)\n    // if (n.flags) {\n    //   n.flags = this.visitStringLiteral(n.flags)\n    // }\n    return n\n  }\n\n  visitParenthesisExpression(n: ParenthesisExpression): Expression {\n    n.expression = this.visitExpression(n.expression)\n    return n\n  }\n\n  visitObjectExpression(n: ObjectExpression): Expression {\n    if (n.properties) {\n      n.properties = this.visitObjectProperties(n.properties)\n    }\n    return n\n  }\n\n  visitObjectProperties(nodes: (Property | SpreadElement)[]): (Property | SpreadElement)[] {\n    return nodes.map(this.visitObjectProperty.bind(this))\n  }\n\n  visitObjectProperty(n: Property | SpreadElement): Property | SpreadElement {\n    switch (n.type) {\n      case 'SpreadElement':\n        return this.visitSpreadElement(n)\n      default:\n        return this.visitProperty(n)\n    }\n  }\n\n  visitProperty(n: Property): Property | SpreadElement {\n    switch (n.type) {\n      case 'Identifier':\n        return this.visitIdentifier(n)\n      case 'AssignmentProperty':\n        return this.visitAssignmentProperty(n)\n      case 'GetterProperty':\n        return this.visitGetterProperty(n)\n      case 'KeyValueProperty':\n        return this.visitKeyValueProperty(n)\n      case 'MethodProperty':\n        return this.visitMethodProperty(n)\n      case 'SetterProperty':\n        return this.visitSetterProperty(n)\n    }\n  }\n\n  visitSetterProperty(n: SetterProperty): Property | SpreadElement {\n    n.key = this.visitPropertyName(n.key)\n    n.param = this.visitPattern(n.param)\n    if (n.body) {\n      n.body = this.visitBlockStatement(n.body)\n    }\n    return n\n  }\n\n  visitMethodProperty(n: MethodProperty): Property | SpreadElement {\n    n.key = this.visitPropertyName(n.key)\n    if (n.body) {\n      n.body = this.visitBlockStatement(n.body)\n    }\n    n.decorators = this.visitDecorators(n.decorators)\n    n.params = this.visitParameters(n.params)\n    n.returnType = this.visitTsTypeAnnotation(n.returnType)\n    n.typeParameters = this.visitTsTypeParameterDeclaration(n.typeParameters)\n    return n\n  }\n\n  visitKeyValueProperty(n: KeyValueProperty): Property | SpreadElement {\n    n.key = this.visitPropertyName(n.key)\n    n.value = this.visitExpression(n.value)\n    return n\n  }\n\n  visitGetterProperty(n: GetterProperty): Property | SpreadElement {\n    n.key = this.visitPropertyName(n.key)\n    if (n.body) {\n      n.body = this.visitBlockStatement(n.body)\n    }\n    return n\n  }\n\n  visitAssignmentProperty(n: AssignmentProperty): Property | SpreadElement {\n    n.key = this.visitIdentifier(n.key)\n    n.value = this.visitExpression(n.value)\n    return n\n  }\n\n  visitNullLiteral(n: NullLiteral): NullLiteral {\n    return n\n  }\n\n  visitNewExpression(n: NewExpression): Expression {\n    n.callee = this.visitExpression(n.callee)\n    if (n.arguments) {\n      n.arguments = this.visitArguments(n.arguments)\n    }\n    n.typeArguments = this.visitTsTypeArguments(n.typeArguments)\n    return n\n  }\n\n  visitTsTypeArguments(\n    n: TsTypeParameterInstantiation | undefined\n  ): TsTypeParameterInstantiation | undefined {\n    if (n) {\n      n.params = this.visitTsTypes(n.params)\n    }\n    return n\n  }\n\n  visitArguments(nodes: Argument[]): Argument[] {\n    return nodes.map(this.visitArgument.bind(this))\n  }\n\n  visitArgument(n: Argument): Argument {\n    n.expression = this.visitExpression(n.expression)\n    return n\n  }\n\n  visitMetaProperty(n: MetaProperty): Expression {\n    // n.meta = this.visitIdentifierReference(n.meta)\n    // n.property = this.visitIdentifier(n.property)\n    return n\n  }\n\n  visitMemberExpression(n: MemberExpression): Expression {\n    // n.property = this.visitExpressionOrSuper(n.property)\n    n.object = this.visitExpression(n.object)\n    return n\n  }\n\n  visitExpressionOrSuper(n: Expression | Super): Expression | Super {\n    if (n.type === 'Super') {\n      return n\n    }\n    return this.visitExpression(n as Expression)\n  }\n\n  visitJSXText(n: JSXText): JSXText {\n    return n\n  }\n\n  visitJSXNamespacedName(n: JSXNamespacedName): JSXNamespacedName {\n    n.namespace = this.visitIdentifierReference(n.namespace)\n    n.name = this.visitIdentifierReference(n.name)\n    return n\n  }\n\n  visitJSXMemberExpression(n: JSXMemberExpression): JSXMemberExpression {\n    n.object = this.visitJSXObject(n.object)\n    n.property = this.visitIdentifierReference(n.property)\n    return n\n  }\n\n  visitJSXObject(n: JSXObject): JSXObject {\n    switch (n.type) {\n      case 'Identifier':\n        return this.visitIdentifierReference(n)\n      case 'JSXMemberExpression':\n        return this.visitJSXMemberExpression(n)\n    }\n  }\n\n  visitJSXFragment(n: JSXFragment): JSXFragment {\n    n.opening = this.visitJSXOpeningFragment(n.opening)\n    if (n.children) {\n      n.children = this.visitJSXElementChildren(n.children)\n    }\n    n.closing = this.visitJSXClosingFragment(n.closing)\n    return n\n  }\n\n  visitJSXClosingFragment(n: JSXClosingFragment): JSXClosingFragment {\n    return n\n  }\n\n  visitJSXElementChildren(nodes: JSXElementChild[]): JSXElementChild[] {\n    return nodes.map(this.visitJSXElementChild.bind(this))\n  }\n\n  visitJSXElementChild(n: JSXElementChild): JSXElementChild {\n    switch (n.type) {\n      case 'JSXElement':\n        return this.visitJSXElement(n)\n      case 'JSXExpressionContainer':\n        return this.visitJSXExpressionContainer(n)\n      case 'JSXFragment':\n        return this.visitJSXFragment(n)\n      case 'JSXSpreadChild':\n        return this.visitJSXSpreadChild(n)\n      case 'JSXText':\n        return this.visitJSXText(n)\n    }\n  }\n\n  visitJSXExpressionContainer(n: JSXExpressionContainer): JSXExpressionContainer {\n    n.expression = this.visitExpression(n.expression)\n    return n\n  }\n\n  visitJSXSpreadChild(n: JSXSpreadChild): JSXElementChild {\n    n.expression = this.visitExpression(n.expression)\n    return n\n  }\n\n  visitJSXOpeningFragment(n: JSXOpeningFragment): JSXOpeningFragment {\n    return n\n  }\n\n  visitJSXEmptyExpression(n: JSXEmptyExpression): Expression {\n    return n\n  }\n\n  visitJSXElement(n: JSXElement): JSXElement {\n    n.opening = this.visitJSXOpeningElement(n.opening)\n    n.children = this.visitJSXElementChildren(n.children)\n    n.closing = this.visitJSXClosingElement(n.closing)\n    return n\n  }\n\n  visitJSXClosingElement(n: JSXClosingElement | undefined): JSXClosingElement | undefined {\n    if (n) {\n      n.name = this.visitJSXElementName(n.name)\n    }\n    return n\n  }\n\n  visitJSXElementName(n: JSXElementName): JSXElementName {\n    switch (n.type) {\n      case 'Identifier':\n        return this.visitIdentifierReference(n)\n      case 'JSXMemberExpression':\n        return this.visitJSXMemberExpression(n)\n      case 'JSXNamespacedName':\n        return this.visitJSXNamespacedName(n)\n    }\n  }\n\n  visitJSXOpeningElement(n: JSXOpeningElement): JSXOpeningElement {\n    n.name = this.visitJSXElementName(n.name)\n    n.typeArguments = this.visitTsTypeParameterInstantiation(n.typeArguments)\n    n.attributes = this.visitJSXAttributes(n.attributes)\n    n.attributes = this.setScopeAttribute(n.attributes)\n    return n\n  }\n  /**\n   * 设置data-scope-*\n   */\n  setScopeAttribute(\n    attributes: JSXAttributeOrSpread[] | undefined\n  ): JSXAttributeOrSpread[] | undefined {\n    if (attributes && this.hash) {\n      let lastAttr: JSXAttribute\n      if (attributes.length > 0) {\n        lastAttr = attributes[attributes.length - 1] as JSXAttribute\n      }\n      const start = lastAttr ? lastAttr.span.end + 1 : 0\n      const span = { start, end: start + this.hash.length, ctxt: 0 }\n      attributes.push({\n        type: 'JSXAttribute',\n        span,\n        name: {\n          type: 'Identifier',\n          span,\n          value: `data-scope-${this.hash}`,\n          optional: false,\n        },\n        value: null,\n      })\n    }\n\n    return attributes\n  }\n\n  visitJSXAttributes(\n    attrs: JSXAttributeOrSpread[] | undefined\n  ): JSXAttributeOrSpread[] | undefined {\n    if (attrs) return attrs.map(this.visitJSXAttributeOrSpread.bind(this))\n  }\n\n  visitJSXAttributeOrSpread(n: JSXAttributeOrSpread): JSXAttributeOrSpread {\n    switch (n.type) {\n      case 'JSXAttribute':\n        return this.visitJSXAttribute(n)\n      case 'SpreadElement':\n        return this.visitSpreadElement(n)\n    }\n  }\n\n  visitJSXAttribute(n: JSXAttribute): JSXAttributeOrSpread {\n    n.name = this.visitJSXAttributeName(n.name)\n    n.value = this.visitJSXAttributeValue(n.value)\n    return n\n  }\n\n  visitJSXAttributeValue(n: JSXAttrValue): JSXAttrValue {\n    return n\n  }\n\n  visitJSXAttributeName(n: JSXAttributeName): JSXAttributeName {\n    switch (n.type) {\n      case 'Identifier':\n        return this.visitIdentifierReference(n)\n      case 'JSXNamespacedName':\n        return this.visitJSXNamespacedName(n)\n    }\n  }\n\n  visitConditionalExpression(n: ConditionalExpression): Expression {\n    n.test = this.visitExpression(n.test)\n    n.consequent = this.visitExpression(n.consequent)\n    n.alternate = this.visitExpression(n.alternate)\n    return n\n  }\n\n  visitCallExpression(n: CallExpression): Expression {\n    n.callee = this.visitExpressionOrSuper(n.callee as Expression | Super)\n    n.typeArguments = this.visitTsTypeParameterInstantiation(n.typeArguments)\n    if (n.arguments) {\n      n.arguments = this.visitArguments(n.arguments)\n    }\n\n    return n\n  }\n\n  visitBooleanLiteral(n: BooleanLiteral): BooleanLiteral {\n    return n\n  }\n\n  visitBinaryExpression(n: BinaryExpression): Expression {\n    n.left = this.visitExpression(n.left)\n    n.right = this.visitExpression(n.right)\n    return n\n  }\n\n  visitAwaitExpression(n: AwaitExpression): Expression {\n    n.argument = this.visitExpression(n.argument)\n    return n\n  }\n\n  visitTsTypeParameterDeclaration(\n    n: TsTypeParameterDeclaration | undefined\n  ): TsTypeParameterDeclaration | undefined {\n    if (n) {\n      n.parameters = this.visitTsTypeParameters(n.parameters)\n    }\n    return n\n  }\n\n  visitTsTypeParameters(nodes: TsTypeParameter[]): TsTypeParameter[] {\n    return nodes.map(this.visitTsTypeParameter.bind(this))\n  }\n\n  visitTsTypeParameter(n: TsTypeParameter): TsTypeParameter {\n    if (n.constraint) {\n      n.constraint = this.visitTsType(n.constraint)\n    }\n    if (n.default) {\n      n.default = this.visitTsType(n.default)\n    }\n    n.name = this.visitIdentifierReference(n.name)\n    return n\n  }\n\n  visitTsTypeAnnotation(a: TsTypeAnnotation | undefined): TsTypeAnnotation | undefined {\n    if (a) {\n      a.typeAnnotation = this.visitTsType(a.typeAnnotation)\n    }\n    return a\n  }\n\n  // visitTsType(n: TsType): TsType {\n  //   throw new Error('Method visitTsType not implemented.')\n  // }\n\n  visitPatterns(nodes: Pattern[]): Pattern[] {\n    return nodes.map(this.visitPattern.bind(this))\n  }\n\n  visitImportDeclaration(n: ImportDeclaration): ImportDeclaration {\n    n.source = this.visitStringLiteral(n.source)\n    n.specifiers = this.visitImportSpecifiers(n.specifiers || [])\n    return n\n  }\n\n  visitImportSpecifiers(nodes: ImportSpecifier[]): ImportSpecifier[] {\n    return nodes.map(this.visitImportSpecifier.bind(this))\n  }\n\n  visitImportSpecifier(node: ImportSpecifier): ImportSpecifier {\n    switch (node.type) {\n      case 'ImportDefaultSpecifier':\n        return this.visitImportDefaultSpecifier(node)\n\n      case 'ImportNamespaceSpecifier':\n        return this.visitImportNamespaceSpecifier(node)\n\n      case 'ImportSpecifier':\n        return this.visitNamedImportSpecifier(node)\n    }\n  }\n  visitNamedImportSpecifier(node: NamedImportSpecifier): NamedImportSpecifier {\n    node.local = this.visitBindingIdentifier(node.local)\n\n    if (node.imported) {\n      node.imported = this.visitIdentifierReference(node.imported)\n    }\n\n    return node\n  }\n\n  visitImportNamespaceSpecifier(node: ImportNamespaceSpecifier): ImportNamespaceSpecifier {\n    node.local = this.visitBindingIdentifier(node.local)\n\n    return node\n  }\n\n  visitImportDefaultSpecifier(node: ImportDefaultSpecifier): ImportSpecifier {\n    node.local = this.visitBindingIdentifier(node.local)\n\n    return node\n  }\n\n  visitBindingIdentifier(i: Identifier): Identifier {\n    return this.visitIdentifier(i)\n  }\n\n  visitIdentifierReference(i: Identifier): Identifier {\n    return this.visitIdentifier(i)\n  }\n\n  visitLabelIdentifier(label: Identifier): Identifier {\n    return this.visitIdentifier(label)\n  }\n\n  visitIdentifier(n: Identifier): Identifier {\n    return n\n  }\n\n  visitStringLiteral(n: StringLiteral): StringLiteral {\n    return n\n  }\n\n  visitNumericLiteral(n: NumericLiteral): NumericLiteral {\n    return n\n  }\n\n  visitBigIntLiteral(n: BigIntLiteral): BigIntLiteral {\n    return n\n  }\n\n  visitPattern(n: Pattern): Pattern {\n    switch (n.type) {\n      case 'Identifier':\n        return this.visitBindingIdentifier(n)\n      case 'ArrayPattern':\n        return this.visitArrayPattern(n)\n      case 'ObjectPattern':\n        return this.visitObjectPattern(n)\n      case 'AssignmentPattern':\n        return this.visitAssignmentPattern(n)\n      case 'RestElement':\n        return this.visitRestElement(n)\n      default:\n        return this.visitExpression(n)\n    }\n  }\n\n  visitRestElement(n: RestElement): RestElement {\n    n.argument = this.visitPattern(n.argument)\n    n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation)\n    return n\n  }\n\n  visitAssignmentPattern(n: AssignmentPattern): Pattern {\n    n.left = this.visitPattern(n.left)\n    n.right = this.visitExpression(n.right)\n    n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation)\n    return n\n  }\n\n  visitObjectPattern(n: ObjectPattern): Pattern {\n    n.properties = this.visitObjectPatternProperties(n.properties)\n    n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation)\n    return n\n  }\n\n  visitObjectPatternProperties(nodes: ObjectPatternProperty[]): ObjectPatternProperty[] {\n    return nodes.map(this.visitObjectPatternProperty.bind(this))\n  }\n\n  visitObjectPatternProperty(n: ObjectPatternProperty): ObjectPatternProperty {\n    switch (n.type) {\n      case 'AssignmentPatternProperty':\n        return this.visitAssignmentPatternProperty(n)\n      case 'KeyValuePatternProperty':\n        return this.visitKeyValuePatternProperty(n)\n      case 'RestElement':\n        return this.visitRestElement(n)\n    }\n  }\n\n  visitKeyValuePatternProperty(n: KeyValuePatternProperty): ObjectPatternProperty {\n    n.key = this.visitPropertyName(n.key)\n    n.value = this.visitPattern(n.value)\n    return n\n  }\n\n  visitAssignmentPatternProperty(n: AssignmentPatternProperty): ObjectPatternProperty {\n    n.key = this.visitBindingIdentifier(n.key)\n    n.value = this.visitOptionalExpression(n.value)\n    return n\n  }\n\n  visitArrayPattern(n: ArrayPattern): Pattern {\n    n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation)\n    n.elements = this.visitArrayPatternElements(n.elements)\n    return n\n  }\n\n  visitArrayPatternElements(nodes: (Pattern | undefined)[]): (Pattern | undefined)[] {\n    return nodes.map(this.visitArrayPatternElement.bind(this))\n  }\n\n  visitArrayPatternElement(n: Pattern | undefined): Pattern | undefined {\n    if (n) {\n      n = this.visitPattern(n)\n    }\n    return n\n  }\n}\n","import fs from 'fs'\n\n/**\n * 获取文件的全路径\n * @param dir 查询的目录\n * @param filename 查询的文件\n * @returns 找到则返回文件全路径，未找到则返回undefined\n */\nexport const getFileFullPath = (fullDir: string, filename: string) => {\n  const filter = (method) => (item: string) => fs.statSync(`${fullDir}/${item}`)[method]()\n  const list = fs.readdirSync(fullDir)\n  const files = list.filter(filter('isFile'))\n  const dirs = list.filter(filter('isDirectory'))\n\n  const isExist = files.includes(filename)\n  if (isExist) {\n    return `${fullDir}/${filename}`\n  }\n  if (dirs.length === 0) {\n    return undefined\n  }\n  const dirTarget = dirs.find((dir: string) => getFileFullPath(`${fullDir}/${dir}`, filename))\n\n  return dirTarget ? `${fullDir}/${dirTarget}/${filename}` : undefined\n}\n"],"mappings":"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","names":[]}